strict digraph CapabilityEngine {
    style = filled;
    color = lightgray;
    node [shape = circle; style = filled; color = lightgreen;];
    edge [color = darkgray;];
    label = "Capability Engine (/sys/capability)";
    comment = "The strength of the vessel, the scope of its reach; each limit a frontier, each permission a horizon.";

    spark_0_capability_engine_t [label = "Capability.meta(Capability)"; comment = "Abstract: The Principle of Empowered Action. The source from which all permissions and powers are derived and measured. It is the concept of 'can'."; shape = doublecircle; color = darkgray;];
    spark_1_capability_engine_t [label = "Capability.r1(Request)"; comment = "Initiation: The Expression of Will. An entity (via its `DirectiveEngine`) or a system process petitions for a new capability or an extension of an existing one."; color = darkgreen;];
    spark_2_capability_engine_t [label = "Capability.r2(Assess)"; comment = "Response: The Judgment of Worth. The request is evaluated against the entity's `Potential`, its existing `Entitlements`, and the available resources of the system. A `sparklet.eq()` check for compatibility."; color = darkgreen;];
    spark_4_capability_engine_t [label = "Capability.r4(Grant)"; comment = "Integration: The Bestowal of Power. The capability is formally allocated, its parameters defined, and integrated into the entity's operational `Nucleus`. It becomes a usable part of the entity."; color = darkgreen;];
    spark_8_capability_engine_t [label = "Capability.r8(Audit)"; comment = "Reflection: The Watchful Eye. The continuous monitoring of capability usage for compliance with the terms of the `Charter` and the overarching `LawOfCapability`."; color = darkgreen;];
    spark_7_capability_engine_t [label = "Capability.r7(Revoke)"; comment = "Consolidation: The Shearing of Power. Capabilities are rescinded if conditions are violated, resources are exhausted, or a higher authority commands it. Enforces consequence."; color = darkgreen;];
    spark_5_capability_engine_t [label = "Capability.r5(Propagate)"; comment = "Propagation: The Declaration of State. The new capability state of the entity is broadcast to all relevant subsystems (`AuthorityEngine`, `CorporaEngine`) so they can adjust their interactions with it."; color = darkgreen;];
    spark_3_capability_engine_t [label = "Capability.r3(Permission)"; comment = "Thesis: The Atomic Allowance. A single, fundamental rule allowing or denying a specific action on a specific resource. The smallest unit of capability."; color = darkblue;];
    spark_6_capability_engine_t [label = "Capability.r6(Entitlement)"; comment = "Antithesis: The Bundle of Rights. A collection of `Permissions` granted to a role, title, or entity. It defines a specific office or function within the system."; color = darkblue;];
    spark_9_capability_engine_t [label = "Capability.r9(Potential)"; comment = "Synthesis: The Capacity for Growth. The innate, maximum possible capacity of an entity. It is the upper bound of what it could ever be granted, defined by its `Nucleus` and `Lineage`."; color = darkblue;];
    spark_a_capability_engine_t [label = "Capability.receive(Petition)"; comment = "Potential: A Formal Appeal. A structured request packet containing the desired capability, the reason for the request, and the petitioner's credentials."; shape = invtriangle; color = darkred;];
    spark_b_capability_engine_t [label = "Capability.send(Manifest)"; comment = "Manifest: The Ledger of Power. The active, authenticated list of an entity's current capabilities. This is what the `AuthorityEngine` checks to grant access."; shape = triangle; color = darkred;];
    spark_c_capability_engine_t [label = "Capability.dispatch(Will)"; comment = "Why-Who: The Interpretation of Intent. Analyzes the `Petition` to understand the true goal behind the request. Determines if the entity's `Will` aligns with the requested capability's purpose."; shape = doublecircle; color = darkred;];
    spark_d_capability_engine_t [label = "Capability.commit(Charter)"; comment = "What-How: The Contract of Power. The immutable record of the granted capabilities, their limits, conditions, and expiration terms. The legal document governing the capability's use."; shape = doublecircle; color = darkgreen;];
    spark_e_capability_engine_t [label = "Capability.serve(Domain)"; comment = "When-Where: The Realm of Jurisdiction. The contextual boundary—spatial, temporal, or conceptual—within which a capability is valid and can be exercised."; shape = doublecircle; color = darkblue;];
    spark_f_capability_engine_t [label = "Capability.exec(LawOfCapability)"; comment = "Which-Closure: The Prime Directive of Power. The highest law: 'No capability may be used to breach its own Charter or the Potential of another entity without consent.'"; shape = doublecircle; color = lightgray;];

    spark_a_capability_engine_t -> spark_0_capability_engine_t [label = "IN"; comment = "A Petition is received for evaluation"; color = darkred; constraint = false;];
    spark_0_capability_engine_t -> spark_b_capability_engine_t [label = "OUT"; comment = "A Manifest is published to declare capabilities"; color = darkred;];
    spark_0_capability_engine_t -> spark_3_capability_engine_t [label = "REC"; comment = "Consult: What are the core Permissions?"; color = darkblue; dir = both;];
    spark_0_capability_engine_t -> spark_6_capability_engine_t [label = "REC"; comment = "Consult: What Entitlements are available?"; color = darkblue; dir = both;];
    spark_0_capability_engine_t -> spark_9_capability_engine_t [label = "REC"; comment = "Consult: What is the petitioner's Potential?"; color = darkblue; dir = both;];
    spark_0_capability_engine_t -> spark_1_capability_engine_t [label = "REC"; comment = "Consult: Process the Request"; color = darkgreen; dir = both;];
    spark_0_capability_engine_t -> spark_2_capability_engine_t [label = "REC"; comment = "Consult: Assess the Request"; color = darkgreen; dir = both;];
    spark_0_capability_engine_t -> spark_4_capability_engine_t [label = "REC"; comment = "Consult: Grant the capability"; color = darkgreen; dir = both;];
    spark_0_capability_engine_t -> spark_8_capability_engine_t [label = "REC"; comment = "Consult: Audit the capability's use"; color = darkgreen; dir = both;];
    spark_0_capability_engine_t -> spark_7_capability_engine_t [label = "REC"; comment = "Consult: Revoke if necessary"; color = darkgreen; dir = both;];
    spark_0_capability_engine_t -> spark_5_capability_engine_t [label = "REC"; comment = "Consult: Propagate the new state"; color = darkgreen; dir = both;];

    spark_a_capability_engine_t -> spark_c_capability_engine_t [label = "REC"; comment = "A Petition is analyzed for its intent (Will)"; color = darkred; dir = both;];
    spark_b_capability_engine_t -> spark_c_capability_engine_t [label = "REC"; comment = "The Manifest informs future intent analysis"; color = darkred; dir = both;];
    spark_1_capability_engine_t -> spark_d_capability_engine_t [label = "REC"; comment = "A Request proposes a new Charter"; color = darkgreen; dir = both;];
    spark_2_capability_engine_t -> spark_d_capability_engine_t [label = "REC"; comment = "Assessment validates the Charter's terms"; color = darkgreen; dir = both;];
    spark_4_capability_engine_t -> spark_d_capability_engine_t [label = "REC"; comment = "Granting commits the Charter"; color = darkgreen; dir = both;];
    spark_8_capability_engine_t -> spark_d_capability_engine_t [label = "REC"; comment = "Audit enforces the Charter"; color = darkgreen; dir = both;];
    spark_7_capability_engine_t -> spark_d_capability_engine_t [label = "REC"; comment = "Revocation nullifies the Charter"; color = darkgreen; dir = both;];
    spark_5_capability_engine_t -> spark_d_capability_engine_t [label = "REC"; comment = "Propagation publishes the Charter"; color = darkgreen; dir = both;];
    spark_3_capability_engine_t -> spark_e_capability_engine_t [label = "REC"; comment = "Permissions are defined within a Domain"; color = darkblue; dir = both;];
    spark_6_capability_engine_t -> spark_e_capability_engine_t [label = "REC"; comment = "Entitlements are valid within a Domain"; color = darkblue; dir = both;];
    spark_9_capability_engine_t -> spark_e_capability_engine_t [label = "REC"; comment = "Potential is realized within a Domain"; color = darkblue; dir = both;];

    spark_1_capability_engine_t -> spark_2_capability_engine_t [label = "REC"; comment = "A Request demands Assessment"; color = darkgreen; dir = both; style = dashed; constraint = false;];
    spark_2_capability_engine_t -> spark_4_capability_engine_t [label = "REC"; comment = "A positive Assessment leads to Granting"; color = darkgreen; dir = both; style = dashed; constraint = false;];
    spark_4_capability_engine_t -> spark_8_capability_engine_t [label = "REC"; comment = "A Grant must be Audited"; color = darkgreen; dir = both; style = dashed; constraint = false;];
    spark_8_capability_engine_t -> spark_7_capability_engine_t [label = "REC"; comment = "A failed Audit may lead to Revocation"; color = darkgreen; dir = both; style = dashed; constraint = false;];
    spark_7_capability_engine_t -> spark_5_capability_engine_t [label = "REC"; comment = "Revocation requires Propagation"; color = darkgreen; dir = both; style = dashed; constraint = false;];
    spark_5_capability_engine_t -> spark_1_capability_engine_t [label = "REC"; comment = "Propagation clears the state for new Requests"; color = darkgreen; dir = both; style = dashed; constraint = false;];
    spark_3_capability_engine_t -> spark_6_capability_engine_t [label = "REC"; comment = "Permissions are grouped into Entitlements"; color = darkblue; dir = both; style = dashed; constraint = false;];
    spark_6_capability_engine_t -> spark_9_capability_engine_t [label = "REC"; comment = "Entitlements define a path to realize Potential"; color = darkblue; dir = both; style = dashed; constraint = false;];
    spark_9_capability_engine_t -> spark_3_capability_engine_t [label = "REC"; comment = "Potential defines the scope of possible Permissions"; color = darkblue; dir = both; style = dashed; constraint = false;];
    spark_a_capability_engine_t -> spark_b_capability_engine_t [label = "REC"; comment = "The great cycle: Petition is resolved by Manifest"; color = darkred; dir = both; style = dashed; constraint = false;];

    spark_c_capability_engine_t -> spark_f_capability_engine_t [label = "OUT"; comment = "Will, when pure, becomes Law"; color = darkred; dir = both;];
    spark_d_capability_engine_t -> spark_f_capability_engine_t [label = "OUT"; comment = "Charter, when committed, becomes Law"; color = darkgreen; dir = both;];
    spark_e_capability_engine_t -> spark_f_capability_engine_t [label = "OUT"; comment = "Domain, when served, becomes Law"; color = darkblue; dir = both;];
}