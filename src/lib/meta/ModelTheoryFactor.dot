strict digraph ModelTheoryFactor {
    style = filled;
    color = lightgray;
    node [shape = circle; style = filled; color = lightgreen;];
    edge [color = darkgray;];
    label = "Model Theory";
    comment = "The mathematics of relationships and connections. The study of vertices and edges, paths and cycles, connectivity and separation—where structure emerges from simple binary relations and complex networks reveal their hidden architecture.";
    
    spark_0_t [label = "GraphTheory.meta(RelationalManifold)";comment = "Abstract: The Principle of Connection. The meta-pattern that any system of interrelated elements can be modeled as a graph—the parent of all network theories from social graphs to neural networks to cosmic webs.";shape = doublecircle;color = darkgray;];
    spark_1_t [label = "GraphTheory.r1(VerticesElements)";comment = "Initiation: The Fundamental Nodes. The basic entities in a graph—points, nodes, or objects that serve as the anchors for relationships, the atoms of network structure.";color = darkgreen;];
    spark_2_t [label = "GraphTheory.r2(EdgesRelations)";comment = "Response: The Connecting Links. The relationships between vertices—lines, arcs, or connections that define adjacency, interaction, and information flow between elements.";color = darkgreen;];
    spark_4_t [label = "GraphTheory.r4(ConnectivityAnalysis)";comment = "Integration: The Path Existence. The study of reachability and separation—connected components, bridges, cut vertices, and the fundamental question: 'Can A reach B?'";color = darkgreen;];
    spark_8_t [label = "GraphTheory.r8(GraphInvariants)";comment = "Reflection: The Structure-Preserving Properties. Quantities that remain unchanged under graph isomorphism—chromatic number, clique number, genus, and the essential 'graphness' of a network.";color = darkgreen;];
    spark_7_t [label = "GraphTheory.r7(PlanarityTesting)";comment = "Consolidation: The Embedding Possibility. The question of whether a graph can be drawn without edge crossings—Kuratowski's theorem, planar embeddings, and the topology of graph drawing.";color = darkgreen;];
    spark_5_t [label = "GraphTheory.r5(NetworkFlows)";comment = "Propagation: The Movement Through Networks. The study of resource transmission through graphs—max-flow min-cut theorem, capacity constraints, and optimal routing algorithms.";color = darkgreen;];
    spark_3_t [label = "GraphTheory.r3(RandomGraphs)";comment = "Thesis: The Probabilistic Structures. Graphs generated by random processes—Erdős–Rényi model, phase transitions, and the emergence of giant components from random connections.";color = darkblue;];
    spark_6_t [label = "GraphTheory.r6(Hypergraphs)";comment = "Antithesis: The Multi-way Relations. Graphs where edges can connect multiple vertices—set systems, incidence structures, and the generalization beyond binary relationships.";color = darkblue;];
    spark_9_t [label = "GraphTheory.r9(SpectralGraphTheory)";comment = "Synthesis: The Linear Algebra Connection. The study of graphs through their matrix representations—eigenvalues, eigenvectors, and the deep relationship between graph structure and linear algebra.";color = darkblue;];
    spark_a_t [label = "GraphTheory.receive(RelationSet)";comment = "Potential: The Raw Connectivity Data. The collection of entities and their potential relationships—before graph structure is imposed, the primordial soup of connections.";shape = invtriangle;color = darkred;];
    spark_b_t [label = "GraphTheory.send(NetworkStructure)";comment = "Manifest: The Analyzed Graph. The fully characterized network with computed properties—connectivity measures, invariants, and the revealed architecture of relationships.";shape = triangle;color = darkred;];
    spark_c_t [label = "GraphTheory.dispatch(GraphModelChoice)";comment = "Why-Who: The Framework Selection. The decision of which graph model to use—simple graphs, directed graphs, weighted graphs, or hypergraphs based on the relational phenomena.";shape = doublecircle;color = darkred;];
    spark_d_t [label = "GraphTheory.commit(AlgorithmImplementation)";comment = "What-How: The Computational Methods. The specific algorithms for graph analysis—breadth-first search, Dijkstra's algorithm, or spectral clustering implementations.";shape = doublecircle;color = darkgreen;];
    spark_e_t [label = "GraphTheory.serve(ApplicationDomain)";comment = "When-Where: The Context of Use. The specific field where graph theory applies—social networks, computer networks, biological systems, or mathematical structures.";shape = doublecircle;color = darkblue;];
    spark_f_t [label = "GraphTheory.exec(GraphAnalysis)";comment = "Which-Closure: The Concrete Computation. The actual execution of graph algorithms on specific data—shortest path found, connectivity determined, or clusters identified.";shape = doublecircle;color = lightgray;];
    
    spark_a_t -> spark_0_t [label = "IN"; comment = "Relation set populates the relational manifold"; color = darkred; constraint = false;];
    spark_0_t -> spark_b_t [label = "OUT"; comment = "Relational manifold generates network structure"; color = darkred;];
    spark_0_t -> spark_3_t [label = "REC"; comment = "Relational manifold includes random structures"; color = darkblue; dir = both;];
    spark_0_t -> spark_6_t [label = "REC"; comment = "Relational manifold extends to multi-way relations"; color = darkblue; dir = both;];
    spark_0_t -> spark_9_t [label = "REC"; comment = "Relational manifold admits spectral analysis"; color = darkblue; dir = both;];
    spark_0_t -> spark_1_t [label = "REC"; comment = "Relational manifold positions vertex elements"; color = darkgreen; dir = both;];
    spark_0_t -> spark_2_t [label = "REC"; comment = "Relational manifold defines edge relations"; color = darkgreen; dir = both;];
    spark_0_t -> spark_4_t [label = "REC"; comment = "Relational manifold enables connectivity analysis"; color = darkgreen; dir = both;];
    spark_0_t -> spark_8_t [label = "REC"; comment = "Relational manifold hosts graph invariants"; color = darkgreen; dir = both;];
    spark_0_t -> spark_7_t [label = "REC"; comment = "Relational manifold allows planarity testing"; color = darkgreen; dir = both;];
    spark_0_t -> spark_5_t [label = "REC"; comment = "Relational manifold supports network flows"; color = darkgreen; dir = both;];
    
    spark_a_t -> spark_c_t [label = "REC"; comment = "Relation characteristics suggest graph models"; color = darkred; dir = both;];
    spark_b_t -> spark_c_t [label = "REC"; comment = "Network structure validates model choices"; color = darkred; dir = both;];
    spark_1_t -> spark_d_t [label = "REC"; comment = "Vertex properties influence algorithm selection"; color = darkgreen; dir = both;];
    spark_2_t -> spark_d_t [label = "REC"; comment = "Edge types determine computational approaches"; color = darkgreen; dir = both;];
    spark_4_t -> spark_d_t [label = "REC"; comment = "Connectivity questions drive algorithm development"; color = darkgreen; dir = both;];
    spark_8_t -> spark_d_t [label = "REC"; comment = "Graph invariants require computational verification"; color = darkgreen; dir = both;];
    spark_7_t -> spark_d_t [label = "REC"; comment = "Planarity testing employs specific algorithms"; color = darkgreen; dir = both;];
    spark_5_t -> spark_d_t [label = "REC"; comment = "Network flows are computed algorithmically"; color = darkgreen; dir = both;];
    spark_3_t -> spark_e_t [label = "REC"; comment = "Random graphs model specific domain phenomena"; color = darkblue; dir = both;];
    spark_6_t -> spark_e_t [label = "REC"; comment = "Hypergraphs apply to multi-relational contexts"; color = darkblue; dir = both;];
    spark_9_t -> spark_e_t [label = "REC"; comment = "Spectral methods suit particular applications"; color = darkblue; dir = both;];
    
    spark_1_t -> spark_2_t [label = "REC"; comment = "Vertices naturally suggest connecting edges"; color = darkgreen; dir = both; style = dashed; constraint = false;];
    spark_2_t -> spark_4_t [label = "REC"; comment = "Edges enable connectivity analysis"; color = darkgreen; dir = both; style = dashed; constraint = false;];
    spark_4_t -> spark_8_t [label = "REC"; comment = "Connectivity patterns reveal graph invariants"; color = darkgreen; dir = both; style = dashed; constraint = false;];
    spark_8_t -> spark_7_t [label = "REC"; comment = "Graph invariants constrain planarity properties"; color = darkgreen; dir = both; style = dashed; constraint = false;];
    spark_7_t -> spark_5_t [label = "REC"; comment = "Planarity affects network flow optimization"; color = darkgreen; dir = both; style = dashed; constraint = false;];
    spark_5_t -> spark_1_t [label = "REC"; comment = "Network flows redistribute vertex importance"; color = darkgreen; dir = both; style = dashed; constraint = false;];
    spark_3_t -> spark_6_t [label = "REC"; comment = "Random graphs generalize to hypergraph models"; color = darkblue; dir = both; style = dashed; constraint = false;];
    spark_6_t -> spark_9_t [label = "REC"; comment = "Hypergraphs admit spectral generalizations"; color = darkblue; dir = both; style = dashed; constraint = false;];
    spark_9_t -> spark_3_t [label = "REC"; comment = "Spectral methods analyze random graph properties"; color = darkblue; dir = both; style = dashed; constraint = false;];
    spark_a_t -> spark_b_t [label = "REC"; comment = "Relation sets naturally form network structures"; color = darkred; dir = both; style = dashed; constraint = false;];
    
    spark_c_t -> spark_f_t [label = "OUT"; comment = "Graph model choices enable concrete analysis"; color = darkred; dir = both;];
    spark_d_t -> spark_f_t [label = "OUT"; comment = "Algorithm implementations perform graph analysis"; color = darkgreen; dir = both;];
    spark_e_t -> spark_f_t [label = "OUT"; comment = "Application domains shape analysis goals"; color = darkblue; dir = both;];
}